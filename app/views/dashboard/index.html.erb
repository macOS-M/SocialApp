<% content_for :nav_offset, true %>
<div class="min-h-screen bg-indigo-50 p-6 sm:p-10">
  <div class="max-w-7xl mx-auto grid grid-cols-1 md:grid-cols-4 gap-6">

    <!-- Left column: Profile / stats -->
    <div class="md:col-span-1 bg-white rounded-2xl p-6 shadow-lg">
      <h2 class="text-xl font-bold mb-4">Profile</h2>
      <p class="text-gray-700"><strong>Username:</strong> <%= @user.username %></p>
      <p class="text-gray-700"><strong>Email:</strong> <%= @user.email %></p>
      <p class="text-gray-700"><strong>Date of Birth:</strong> <%= @user.date_of_birth %></p>
      <%= link_to "Edit Profile", edit_user_registration_path, class: "mt-4 inline-block px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600" %>
    </div>

    <!-- Center column -->
    <div class="md:col-span-2 space-y-6">
      <h2 class="text-2xl font-bold mb-4">Your Feed</h2>

      <div class="bg-white p-4 rounded-2xl shadow space-y-3">
        <%= form_with(model: @post, authenticity_token: true, data: { turbo: false }, local: true, id: "dashboard-post-form", class: "space-y-4") do |f| %>
          <div>
            <%= f.label :content, "What's on your mind?", class: "block text-sm font-medium text-gray-700" %>
            <%= f.text_area :content, rows: 4, required: true, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500" %>
            <% if @post.errors[:content].present? %>
              <p class="text-sm text-red-600 mt-1"><%= @post.errors[:content].first %></p>
            <% end %>
          </div>
        <% end %>
        <div class="flex justify-end">
          <button type="submit" form="dashboard-post-form" class="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700">
            Post
          </button>
        </div>
      </div>

      <% @posts.each do |post| %>
        <div class="bg-white p-4 rounded-2xl shadow hover:shadow-md transition relative">
          <div class="flex items-center mb-3">
            <div class="w-10 h-10 rounded-full bg-gradient-to-br from-indigo-400 to-purple-500 flex items-center justify-center overflow-hidden">
              <% user = post.user %>
              <% if user.respond_to?(:profile_image) && user.profile_image.attached? %>
                <%= image_tag url_for(user.profile_image), class: "w-full h-full object-cover" %>
              <% elsif user[:profile_picture].present? %>
                <%= image_tag user[:profile_picture], class: "w-full h-full object-cover" %>
              <% else %>
                <span class="text-white font-bold"><%= user.username[0].upcase %></span>
              <% end %>
            </div>
            <div class="ml-3">
              <%= link_to user.username, profile_path(user.username), class: "font-semibold text-gray-900 hover:text-indigo-600 transition" %>
              <span class="text-gray-400 text-sm ml-2">â€¢ <%= time_ago_in_words(post.created_at) %> ago</span>
            </div>
          </div>
          <p class="text-gray-800 whitespace-pre-wrap"><%= post.content %></p>

          <% if post.user == current_user %>
            <div class="absolute top-4 right-4 inline-block text-left" data-controller="dropdown">
              <button type="button" class="inline-flex justify-center w-8 h-8 rounded-full hover:bg-gray-200" data-action="click->dropdown#toggle">
                <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M10 6a2 2 0 110-4 2 2 0 010 4zm0 6a2 2 0 110-4 2 2 0 010 4zm0 6a2 2 0 110-4 2 2 0 010 4z" />
                </svg>
              </button>

              <div data-dropdown-target="menu" class="hidden absolute right-0 mt-2 w-32 bg-white border rounded shadow-lg z-50">
                <%= link_to "Edit", edit_post_path(post), class: "block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" %>
                <%= link_to "Delete", post_path(post), data: { turbo_method: :delete, turbo_confirm: "Are you sure?" }, class: "block px-4 py-2 text-sm text-red-600 hover:bg-gray-100" %>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>

      <% if @posts.empty? %>
        <p class="text-gray-500">No posts yet. Start by creating one!</p>
      <% end %>
    </div>

    <!-- Right column -->
    <div class="md:col-span-1 space-y-6">

      <div class="bg-white rounded-2xl p-4 shadow-lg">
        <h2 class="text-xl font-bold mb-4">Friend Requests</h2>
        <% if @user.inverse_friendships.pending.any? %>
          <ul>
            <% @user.inverse_friendships.pending.each do |request| %>
              <li class="flex justify-between items-center mb-2">
                <span><%= request.user.username %> wants to be your friend</span>
                <div class="flex space-x-2">
                  <%= link_to "Accept", accept_friendship_path(request), data: { turbo_method: :patch }, class: "text-green-500 hover:underline" %>
                  <%= link_to "Reject", reject_friendship_path(request), data: { turbo_method: :patch }, class: "text-red-500 hover:underline" %>
                </div>
              </li>
            <% end %>
          </ul>
        <% else %>
          <p class="text-gray-500">No pending requests</p>
        <% end %>
      </div>

      <div class="bg-white rounded-2xl p-4 shadow-lg">
        <h2 class="text-xl font-bold mb-4">Friends</h2>
        <% if @user.friends.any? %>
          <ul>
            <% @user.friends.each do |friend| %>
              <li class="flex justify-between items-center mb-2">
                <%= link_to friend.username, profile_path(friend.username), class: "hover:text-indigo-600 transition" %>
                <%= link_to "Remove", friendship_path(friend), data: { turbo_method: :delete, turbo_confirm: "Remove friend?" }, class: "text-red-500 hover:underline" %>
              </li>
            <% end %>
          </ul>
        <% else %>
          <p class="text-gray-500">No friends yet. Add some!</p>
        <% end %>
      </div>

      <div class="bg-white rounded-2xl p-4 shadow-lg">
        <h2 class="text-xl font-bold mb-4">Add Friends</h2>
        <% @users.each do |u| %>
          <% next if u == current_user %>
          <% next if @user.friends.include?(u) %>
          <% next if @user.pending_friends.include?(u) %>
          <% next if @user.incoming_pending_friends.include?(u) %>
          <div class="flex justify-between items-center mb-2">
            <%= link_to u.username, profile_path(u.username), class: "hover:text-indigo-600 transition" %>
            <%= link_to "Add Friend", friendships_path(friend_id: u.id), data: { turbo_method: :post }, class: "text-blue-500 hover:underline" %>
          </div>
        <% end %>
      </div>

      <!-- Messaging Section -->
      <div class="bg-white rounded-2xl p-4 shadow-lg">
        <h2 class="text-xl font-bold mb-4">Messages</h2>
        <% if @user.friends.any? %>
          <% @user.friends.each do |friend| %>
            <% unread_count = (@unread_counts && @unread_counts[friend.id]) || 0 %>
      <button type="button" class="w-full mb-3 flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg cursor-pointer text-left border-0 bg-transparent chat-friend-button" 
        data-user-id="<%= friend.id %>"
        data-username="<%= friend.username %>"
        data-avatar="<%= friend.profile_image.attached? ? url_for(friend.profile_image) : '' %>">
              <div class="flex items-center space-x-3">
                <div class="w-10 h-10 rounded-full bg-gradient-to-br from-indigo-400 to-purple-500 flex items-center justify-center overflow-hidden flex-shrink-0">
                  <% if friend.profile_image.attached? %>
                    <%= image_tag url_for(friend.profile_image), class: "w-full h-full object-cover" %>
                  <% else %>
                    <span class="text-white font-bold"><%= friend.username[0].upcase %></span>
                  <% end %>
                </div>
                <div class="flex-1">
                  <p class="font-semibold text-gray-900"><%= friend.username %></p>
                  <% last_message = (@last_messages && @last_messages[friend.id]) %>
                  <% if last_message %>
                    <p class="text-xs text-gray-500 truncate max-w-[150px]">
                      <%= last_message.sender_id == current_user.id ? "You: " : "" %>
                      <%= truncate(last_message.body, length: 30) %>
                    </p>
                  <% end %>
                </div>
              </div>
              <% if unread_count > 0 %>
                <span class="inline-block bg-red-500 text-white text-xs rounded-full px-2 py-1 font-semibold">
                  <%= unread_count %>
                </span>
              <% end %>
            </button>
          <% end %>
        <% else %>
          <p class="text-gray-500">No friends to message yet.</p>
        <% end %>
      </div>

    </div>

  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard script loaded');

    // Escape user-provided text to prevent XSS when inserting into the DOM
    function escapeHtml(text) {
      if (text === null || text === undefined) return '';
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
    const buttons = document.querySelectorAll('.chat-friend-button');
    console.log('Found buttons:', buttons.length);
    
    buttons.forEach(function(button) {
      button.addEventListener('click', async function(e) {
        console.log('Button clicked!', this.dataset.userId, this.dataset.username);
        
        const widget = document.getElementById('chat-widget');
        if (!widget) {
          console.error('Widget not found');
          return;
        }
        
        widget.classList.remove('hidden');
        document.getElementById('chat-recipient-name').textContent = this.dataset.username;
        const avatarImg = document.getElementById('chat-recipient-avatar-img')
        const avatarInitial = document.getElementById('chat-recipient-avatar')
        if (this.dataset.avatar && this.dataset.avatar.length > 0) {
          avatarImg.src = this.dataset.avatar
          avatarImg.classList.remove('hidden')
          avatarInitial.classList.add('hidden')
        } else {
          avatarImg.src = ''
          avatarImg.classList.add('hidden')
          avatarInitial.classList.remove('hidden')
          avatarInitial.textContent = this.dataset.username.charAt(0).toUpperCase()
        }
        
        const userId = this.dataset.userId;

        // Immediately show a loading placeholder so the previous conversation doesn't flash
        const chatMessagesContainer = document.getElementById('chat-messages');
        if (chatMessagesContainer) {
          chatMessagesContainer.innerHTML = '<p class="text-center text-gray-500 text-sm">Loading messages...</p>';
        }

        // Robust controller lookup: try window reference, then Stimulus API, then poll briefly
        const findController = () => {
          if (window.chatWidgetController) return window.chatWidgetController;
          const widgetEl = document.getElementById('chat-widget');
          if (widgetEl && window.Stimulus && typeof window.Stimulus.getControllerForElementAndIdentifier === 'function') {
            return window.Stimulus.getControllerForElementAndIdentifier(widgetEl, 'chat-widget');
          }
          return null;
        };

        let controller = findController();

        if (!controller) {
          // Wait up to ~500ms for Stimulus to connect (in cases of turbo/importmap timing)
          async function pollForController(timeoutMs = 500, intervalMs = 25) {
            const start = Date.now();
            return new Promise(resolve => {
              function tryFind() {
                const ctrl = findController();
                if (ctrl) {
                  resolve(ctrl);
                } else if (Date.now() - start < timeoutMs) {
                  setTimeout(tryFind, intervalMs);
                } else {
                  resolve(null);
                }
              }
              tryFind();
            });
          }
          controller = await pollForController();
        }

        if (controller) {
          console.debug('Controller found, loading messages for user:', userId);
          try {
            controller.currentRecipientId = userId;
            if (controller.recipientIdTarget) controller.recipientIdTarget.value = userId;
            controller.isMinimized = false;
            const chatBodyEl = document.getElementById('chat-body');
            if (chatBodyEl) chatBodyEl.style.height = 'auto';

            // Call loadMessages and log the result
            if (typeof controller.loadMessages === 'function') {
              await controller.loadMessages(userId);
              console.debug('Messages loaded successfully');
            }

            if (controller.messageInputTarget) controller.messageInputTarget.focus();
          } catch (error) {
            console.error('Error loading messages from controller:', error);
          }
        } else {
          // Controller still not available â€” fall back to manual fetch, but avoid noisy console.error
          console.debug('Controller not available after wait; falling back to manual fetch for user:', userId);

          // Manual fallback
          try {
            const response = await fetch(`/messages/${userId}`, {
              headers: {
                'Accept': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
              }
            });

            if (response.ok) {
              const data = await response.json();

              const container = document.getElementById('chat-messages');
              if (container) {
                if (data.messages && data.messages.length > 0) {
                  container.innerHTML = data.messages.map(msg => {
                    const isCurrentUser = msg.sender_id === <%= current_user.id %>;
                    const alignment = isCurrentUser ? 'justify-end' : 'justify-start';
                    const bgColor = isCurrentUser ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-900';
                    const timeColor = isCurrentUser ? 'text-indigo-100' : 'text-gray-500';

                    return `
                      <div class="flex ${alignment}">
                        <div class="${bgColor} rounded-lg px-4 py-2 max-w-xs break-words shadow">
                <p class="text-sm">${escapeHtml(msg.body)}</p>
                          <p class="text-xs ${timeColor} mt-1">${new Date(msg.created_at).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}</p>
                        </div>
                      </div>
                    `;
                  }).join('');

                  container.scrollTop = container.scrollHeight;
                } else {
                  container.innerHTML = '<p class="text-center text-gray-500 text-sm">No messages yet. Start the conversation!</p>';
                }
              }

              // Set up form recipient id
              const recipientInput = document.getElementById('chat-recipient-id');
              if (recipientInput) recipientInput.value = userId;
            } else {
              console.error('Failed to load messages:', response.statusText);
            }
          } catch (error) {
            console.error('Fetch error:', error);
          }
        }
      });
    });
    
    // Handle form submission to prevent page reload
    document.addEventListener('submit', function(e) {
      if (e.target.id === 'chat-message-form') {
        e.preventDefault();
        console.log('Form submit intercepted');
        
        const form = e.target;
        const recipientId = document.getElementById('chat-recipient-id').value;
        const body = document.getElementById('chat-message-input').value.trim();
        
        if (!body) {
          console.log('Empty message, ignoring');
          return;
        }
        
        console.log('Sending message:', { recipientId, body });
        
        // Disable button
        const sendButton = form.querySelector('button[type="submit"]');
        if (sendButton) sendButton.disabled = true;
        
        // Send via fetch
        const formData = new FormData();
        formData.append('message[recipient_id]', recipientId);
        formData.append('message[body]', body);
        
        fetch('/messages', {
          method: 'POST',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Accept': 'application/json'
          },
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          console.log('Message sent:', data);
          
          // Clear input
          document.getElementById('chat-message-input').value = '';
          
          // Add message to UI
          if (data.message) {
            const container = document.getElementById('chat-messages');
            const isCurrentUser = data.message.sender_id === <%= current_user.id %>;
            const alignment = isCurrentUser ? 'justify-end' : 'justify-start';
            const bgColor = isCurrentUser ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-900';
            const timeColor = isCurrentUser ? 'text-indigo-100' : 'text-gray-500';
            
            const messageHTML = `
              <div class="flex ${alignment}">
                <div class="${bgColor} rounded-lg px-4 py-2 max-w-xs break-words shadow">
                  <p class="text-sm">${escapeHtml(data.message.body)}</p>
                  <p class="text-xs ${timeColor} mt-1">${new Date(data.message.created_at).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}</p>
                </div>
              </div>
            `;
            
            container.insertAdjacentHTML('beforeend', messageHTML);
            container.scrollTop = container.scrollHeight;
          }
          
          // Re-enable button
          if (sendButton) sendButton.disabled = false;
          document.getElementById('chat-message-input').focus();
        })
        .catch(error => {
          console.error('Error sending message:', error);
          alert('Failed to send message');
          if (sendButton) sendButton.disabled = false;
        });
      }
    });
    
    // Handle minimize/close buttons
    let isMinimized = false;
    
    document.addEventListener('click', function(e) {
      const widget = document.getElementById('chat-widget');
      const chatBody = document.getElementById('chat-body');
      const minimizeIcon = document.getElementById('minimize-icon');
      
      if (e.target.closest('button[data-action*="closeChat"]')) {
        e.stopPropagation();
        console.log('Close button clicked');
        widget.classList.add('hidden');
        isMinimized = false;
        chatBody.style.height = 'auto';
        return;
      }
      
      if (e.target.closest('button[data-action*="toggleMinimize"]')) {
        e.stopPropagation();
        console.log('Minimize button clicked');
        
        if (isMinimized) {
          chatBody.style.height = 'auto';
          isMinimized = false;
          if (minimizeIcon) {
            minimizeIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>';
          }
        } else {
          chatBody.style.height = '0';
          isMinimized = true;
          if (minimizeIcon) {
            minimizeIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>';
          }
        }
        return;
      }
    });
  });
</script>
